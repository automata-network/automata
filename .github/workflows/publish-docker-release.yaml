name: Publish Docker image for new releases

on:
  release:
    types:
      - published

jobs:
  build_and_push:
    name: Build and Push
    runs-on: ubuntu-18.04
    env:
      DOCKER_REPO: atactr/automata
    steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: docker-builder
        uses: docker/setup-buildx-action@v1
      - name: Cache Buildx
        uses: actions/cache@v2
        id: buildx-cache
        with:
          path: /tmp/buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Prepare Environment Variables
        run: |
          echo "BUILDX_BUILDER=${{ steps.docker-builder.outputs.name }}" >> $GITHUB_ENV
          echo "BUILDX_BUILDER_CONTAINER=buildx_buildkit_${{ steps.docker-builder.outputs.name }}0" >> $GITHUB_ENV
      - name: Restore buildx cache
        # Handle cache mount in buildx
        # See https://github.com/docker/buildx/issues/156#issuecomment-537492942
        if: steps.buildx-cache.outputs.cache-hit == 'true'
        run: |
          docker buildx stop --builder "${BUILDX_BUILDER}"
          docker run --rm --volumes-from "${BUILDX_BUILDER_CONTAINER}" \
            -v /tmp/buildx-cache:/backup \
            alpine:3.10 /bin/sh -c "cd / && tar xf /backup/backup.tar.gz"
          docker buildx inspect --builder "${BUILDX_BUILDER}" --bootstrap
          docker buildx --builder "${BUILDX_BUILDER}" du --verbose
      - name: ContextFree - Build with cache and push images
        uses: docker/build-push-action@v2
        id: contextfree_docker_build
        with:
          builder: ${{ steps.docker-builder.outputs.name }}
          push: true
          cache-from: |
            type=registry,ref=${{ env.DOCKER_REPO }}:builder
          cache-to: |
            type=local,dest=/tmp/buildx-cache-cross-step,mode=max
          tags: |
            atactr/automata:contextfree-latest
            atactr/automata:contextfree-${{ github.event.release.tag_name }}
          build-args: |
            FEATURES=contextfree
      - name: Automata - Build with cache and push images
        uses: docker/build-push-action@v2
        id: automata_docker_build
        with:
          builder: ${{ steps.docker-builder.outputs.name }}
          push: true
          cache-from: |
            type=registry,ref=${{ env.DOCKER_REPO }}:builder
          cache-to: |
            type=local,dest=/tmp/buildx-cache-cross-step,mode=max
          tags: |
            atactr/automata:automata-latest
            atactr/automata:automata-${{ github.event.release.tag_name }}
          build-args: |
            FEATURES=automata
      - name: Update registry cache
        uses: docker/build-push-action@v2
        if: github.ref == 'refs/heads/main'
        with:
          builder: ${{ steps.docker-builder.outputs.name }}
          cache-from: |
            type=registry,ref=${{ env.DOCKER_REPO }}:builder
            type=local,src=/tmp/buildx-cache-cross-step
          cache-to: |
            type=registry,ref=${{ env.DOCKER_REPO }}:builder,mode=max
      - name: Backup buildx cache
        # Handle cache mount in buildx
        # See https://github.com/docker/buildx/issues/156#issuecomment-537492942
        env:
          KEEP_STORAGE: "1073741824" # this is 1GB
        run: |
          echo "Before pruning"
          docker buildx --builder "${BUILDX_BUILDER}" du --verbose
          echo "Start pruning"
          docker buildx --builder "${BUILDX_BUILDER}" prune --force --filter type=frontend
          docker buildx --builder "${BUILDX_BUILDER}" prune --force --filter type=regular
          docker buildx --builder "${BUILDX_BUILDER}" prune --force --filter type=source.local 
          docker buildx --builder "${BUILDX_BUILDER}" prune --force --keep-storage ${KEEP_STORAGE}
          echo "After pruning"
          docker buildx --builder "${BUILDX_BUILDER}" du --verbose
          echo "Backup buildx cache"
          docker run --rm --volumes-from "${BUILDX_BUILDER_CONTAINER}" \
            -v /tmp/buildx-cache:/backup \
            alpine:3.10 /bin/sh -c "cd / && tar cf /backup/backup.tar.gz /var/lib/buildkit"

      - name: ContextFree Image digest
        run: echo ${{ steps.contextfree_docker_build.outputs.digest }}

      - name: Automata Image digest
        run: echo ${{ steps.automata_docker_build.outputs.digest }}